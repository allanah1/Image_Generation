# -*- coding: utf-8 -*-
"""GAN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ci3x_jYY_vHpZ06lwHBAf1DmPHBul-S6
"""

from __future__ import print_function
import argparse
import torch
import torch.utils.data
from torch import nn, optim
from torchvision import datasets, transforms
from torchvision.utils import save_image
from IPython.display import Image, display
import matplotlib.pyplot as plt
from torch.autograd import Variable
import numpy as np

!mkdir results

torch.autograd.set_detect_anomaly(True)

batch_size = 100
latent_size = 20

cuda = torch.cuda.is_available()
device = torch.device("cuda" if cuda else "cpu")

kwargs = {'num_workers': 1, 'pin_memory': True} if cuda else {}
train_loader = torch.utils.data.DataLoader(
    datasets.MNIST('../data', train=True, download=True,
                   transform=transforms.ToTensor()),
    batch_size=batch_size, shuffle=True, **kwargs)
test_loader = torch.utils.data.DataLoader(
    datasets.MNIST('../data', train=False, transform=transforms.ToTensor()),
    batch_size=batch_size, shuffle=True, **kwargs)

class Generator(nn.Module):
    #The generator takes an input of size latent_size, and will produce an output of size 784.
    #It should have a single hidden linear layer with 400 nodes using ReLU activations, and use Sigmoid activation for its outputs
    def __init__(self, ngpu):
        #xdim = 784, hdim = 400, latent_size = 20):
        super(Generator, self).__init__()
        #TODO 
        self.ngpu = ngpu
        self.main = nn.Sequential(
            nn.Linear(latent_size, 400),
            nn.ReLU(True),
            nn.Linear(400, 784),
            nn.Sigmoid()
        )
        #self.fc1 = nn.Linear(latent_size,hdim)
        #self.fc2 = nn.Linear(hdim, xdim)
        


    def forward(self, z):
        #TODO
        #h = torch.nn.functional.relu(self.fc1(z))
        #torch.sigmoid(self.fc2(h)) 
        return self.main(z)

class Discriminator(nn.Module):
    #The discriminator takes an input of size 784, and will produce an output of size 1.
    #It should have a single hidden linear layer with 400 nodes using ReLU activations, and use Sigmoid activation for its output
    def __init__(self, ngpu):
                 #xdim = 784, hdim = 400, output = 1):
        super(Discriminator, self).__init__()
        #TODO 
        self.ngpu = ngpu
        self.main = nn.Sequential(
            nn.Linear(784, 400),
            nn.ReLU(True),
            nn.Linear(400, 1),
            nn.Sigmoid()
        )
        #self.fc3 = nn.Linear(xdim, hdim)
        #self.fc4 = nn.Linear(hdim, output)
    def forward(self, x):
        #TODO
        #h = torch.nn.functional.relu(self.fc3(x))
        #return torch.sigmoid(self.fc4(h))
        return self.main(x)

v = Generator(1).to(device)
print(v)

f = Discriminator(1).to(device)
print(f)

Tensor = torch.cuda.FloatTensor if cuda else torch.FloatTensor

def train(generator, generator_optimizer, discriminator, discriminator_optimizer):
    #Trains both the generator and discriminator for one epoch on the training dataset.
    #Returns the average generator and discriminator loss (scalar values, use the binary cross-entropy appropriately)
    #TODO
    errG = 0
    errD = 0
    # Initialize BCELoss function
    criterion = nn.BCELoss()

    # Create batch of latent vectors that we will use to visualize
    # the progression of the generator
    fixed_noise = torch.randn(batch_size, latent_size, 1, 1, device=device)

    # Establish convention for real and fake labels during training
    real_label = 1
    fake_label = 0
    
    for i,(data, _) in enumerate(train_loader):
      #Update Discriminator Network
      discriminator.zero_grad()
      #Format batch
      real_cpu = data.view(-1,784).to(device)
      b_size = real_cpu.shape[0]
      label = torch.full((b_size,), real_label, dtype=torch.float, device=device)

      #Forward pass real batch through D
      output = discriminator(real_cpu).view(-1)
      #Calculate loss on all-real batch
      errD_real = criterion(output, label)
      #Calculate gradients for D in backward pass
      errD_real.backward()
      D_x = output.mean().item()

      #Train with all fake batch
      #Generate batch of latent vectors
      noise = torch.randn(b_size, latent_size).to(device)
      #, 1, 1, device = device)
      #Generate fake images with the generator
      fake = generator(noise)
      label.fill_(fake_label)
      #classify all fake batch with Discriminator
      output = discriminator(fake.detach()).view(-1)

      #Calculate discriminator's loss on the all-fake batch
      errD_fake = criterion(output, label)
      #Calculate gradients for this batch
      errD_fake.backward()
      D_G_z1 = output.mean().item()

      #Error of discriminator is sum of error over real and fake batches
      errD = (errD_real + errD_fake)
      #Update D
      discriminator_optimizer.step()

      #Update Generator Network
      generator.zero_grad()
      label.fill_(real_label)
      output = discriminator(fake).view(-1)
      errG = criterion(output, label)
      errG.backward(retain_graph = True)
      D_G_z2 = output.mean().item()
      generator_optimizer.step()
    return errG/len(train_loader), errD/len(train_loader)

def test(generator, discriminator):
    #Runs both the generator and discriminator over the test dataset.
    #Returns the average generator and discriminator loss (scalar values, use the binary cross-entropy appropriately)
    #TODO
    errG = 0
    errD = 0
    criterion = nn.BCELoss()
    real_label = 1
    fake_label = 0

    with torch.no_grad():
       for i,(data, _) in enumerate(test_loader):
        #Format batch
        real_cpu = data.view(-1,784).to(device)
        b_size = real_cpu.shape[0]
        label = torch.full((b_size,), real_label, dtype=torch.float, device=device)

        #Forward pass real batch through D
        output = discriminator(real_cpu).view(-1)
        #Calculate loss on all-real batch
        errD_real = criterion(output, label)
        #Calculate gradients for D in backward pass
        
        D_x = output.mean().item()

        #Generate batch of latent vectors
        noise = torch.randn(b_size, latent_size).to(device)
        #Generate fake images with the generator
        fake = generator(noise)
        label.fill_(fake_label)
        #classify all fake batch with Discriminator
        output = discriminator(fake.detach()).view(-1)

        #Calculate discriminator's loss on the all-fake batch
        errD_fake = criterion(output, label)
        #Calculate gradients for this batch
        
        D_G_z1 = output.mean().item()

        #Error of discriminator is sum of error over real and fake batches
        errD = (errD_real + errD_fake)
        #Update D
        #discriminator_optimizer.step()

        #Update Generator Network
        
        label.fill_(real_label)
        output = discriminator(fake).view(-1)
        errG = criterion(output, label)
        #errG.backward()
        D_G_z2 = output.mean().item()
      
    return errG/len(test_loader), errD/len(test_loader)

test(generator, discriminator)

epochs = 50

discriminator_avg_train_losses = []
discriminator_avg_test_losses = []
generator_avg_train_losses = []
generator_avg_test_losses = []

generator = Generator(1).to(device)
discriminator = Discriminator(1).to(device)



generator_optimizer = optim.Adam(generator.parameters(), lr=1e-3)
discriminator_optimizer = optim.Adam(discriminator.parameters(), lr=1e-3)

for epoch in range(1, epochs + 1):
    generator_avg_train_loss, discriminator_avg_train_loss = train(generator, generator_optimizer, discriminator, discriminator_optimizer)
    generator_avg_test_loss, discriminator_avg_test_loss = test(generator, discriminator)

    discriminator_avg_train_losses.append(discriminator_avg_train_loss)
    generator_avg_train_losses.append(generator_avg_train_loss)
    discriminator_avg_test_losses.append(discriminator_avg_test_loss)
    generator_avg_test_losses.append(generator_avg_test_loss)

    with torch.no_grad():
        sample = torch.randn(64, latent_size).to(device)
        sample = generator(sample).cpu()
        save_image(sample.view(64, 1, 28, 28),
                   'results/sample_' + str(epoch) + '.png')
        print('Epoch #' + str(epoch))
        display(Image('results/sample_' + str(epoch) + '.png'))
        print('\n')

plt.plot(discriminator_avg_train_losses)
plt.plot(generator_avg_train_losses)
plt.title('Training Loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Disc','Gen'], loc='upper right')
plt.show()

plt.plot(discriminator_avg_test_losses)
plt.plot(generator_avg_test_losses)
plt.title('Test Loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Disc','Gen'], loc='upper right')
plt.show()

